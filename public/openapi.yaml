openapi: 3.0.3
info:
  title: WalletGate API
  description: |
    **Developer-first API for EU Digital Identity verification**

    Verify age, residency, and identity using EU Digital Identity Wallets with one simple integration.

    ## Getting Started

    1. **Sign up** at [walletgate.app](https://walletgate.app) to get your API key
    2. **Test for free** with 100 verifications/month using `wg_test_*` keys
    3. **Go live** on a paid plan with `wg_live_*` keys for production verification

    ## Authentication

    All API requests require an API key via the `Authorization: Bearer <key>` header:

    ```bash
    curl -X POST https://api.walletgate.app/v1/verify/sessions \
      -H "Authorization: Bearer wg_test_YOUR_API_KEY" \
      -H "Content-Type: application/json" \
      -d '{"checks":[{"type":"age_over","value":18}]}'
    ```

    ## SDK Libraries

    - **JavaScript/TypeScript**: `npm install @walletgate/sdk`
    - **Other languages**: Use this REST API directly

    ## Rate Limits

    - **Test keys**: 100 verifications/month per merchant
    - **Live keys**: Based on your plan (1,000 to 50,000+/month)

    ## Support

    - **Documentation**: [walletgate.app/docs](https://walletgate.app/docs)
    - **Email**: support@walletgate.app
    - **Security**: security@walletgate.app

  version: 1.0.0
  contact:
    name: WalletGate Support
    url: https://walletgate.app
    email: support@walletgate.app
  license:
    name: Terms of Service
    url: https://walletgate.app/terms

servers:
  - url: https://api.walletgate.app
    description: Production
  - url: http://localhost:4000
    description: Development

tags:
  - name: Health
    description: System health check
  - name: Verification
    description: |
      Create and manage identity verification sessions.

      **Verification Flow:**
      1. Create a session with required checks
      2. Redirect user to `verificationUrl`
      3. User completes verification in their EU Digital Identity Wallet
      4. User is redirected back to your `returnUrl`
      5. Poll the session status or receive a webhook event
  - name: Anomaly Detection
    description: |
      AI-powered fraud detection and security monitoring.

      **5 ML Algorithms Monitor 24/7:**
      - Velocity attacks (rapid-fire verification attempts)
      - Geographic anomalies (unusual location patterns)
      - Bot traffic detection (automated requests)
      - Credential sharing (multiple users, same credentials)
      - Suspicious behavioral patterns

      Each verification gets an AI risk score (0.0-1.0) with automated recommendations.

  - name: Admin Auth
    description: Administrative authentication endpoints used by the dashboard (session-cookie based).

  - name: API Keys
    description: Manage API keys for your account. Secrets are shown only on creation/rotation.

  - name: Webhooks
    description: Configure webhooks to receive signed events from WalletGate.

paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      description: Check if the API is running and database is accessible
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-10-03T20:30:00Z"
              example:
                status: ok
                timestamp: "2025-10-03T20:30:00Z"

  /v1/verify/sessions:
    post:
      tags: [Verification]
      summary: Create verification session
      description: |
        Create a new identity verification session with one or more checks.

        **Common Use Cases:**
        - Age verification (18+, 21+, etc.)
        - EU residency verification
        - Identity matching for KYC

        **Response includes:**
        - Session ID for polling status
        - Verification URL to redirect user to their wallet
        - Expiration time (default: 15 minutes)
      operationId: createSession
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
            examples:
              ageVerification:
                summary: Age verification (18+)
                value:
                  checks:
                    - type: age_over
                      value: 18
                  returnUrl: https://yourapp.com/verify-complete
              combinedChecks:
                summary: Age + EU residency
                value:
                  checks:
                    - type: age_over
                      value: 21
                    - type: residency_in
                      value: ["EU"]
                  returnUrl: https://yourapp.com/verify-complete
                  metadata:
                    userId: "user_123"
                    orderId: "order_456"
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
              example:
                success: true
                data:
                  id: sess_1234567890abcdef
                  status: pending
                  verificationUrl: https://wallet.example.eu/verify?session=sess_1234567890abcdef
                  checks:
                    - type: age_over
                      value: 18
                  expiresAt: "2025-10-03T20:45:00Z"
                  createdAt: "2025-10-03T20:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/UsageLimitExceeded'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /v1/verify/sessions/{sessionId}:
    get:
      tags: [Verification]
      summary: Get session status
      description: |
        Retrieve verification session details and check results.

        **Session Status:**
        - `pending`: Session created, waiting for user
        - `in_progress`: User started verification
        - `completed`: Verification successful
        - `failed`: Verification failed (user declined or checks failed)
        - `expired`: Session expired (default: 15 minutes)

        **Polling Recommended:**
        - Poll every 2-3 seconds after redirecting user
        - Stop polling when status is not `pending` or `in_progress`
        - Or use webhooks for real-time updates
      operationId: getSession
      security:
        - ApiKeyAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Session ID returned from session creation
          schema:
            type: string
            example: sess_1234567890abcdef
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
              examples:
                pending:
                  summary: Pending session
                  value:
                    success: true
                    data:
                      id: sess_1234567890abcdef
                      status: pending
                      verificationUrl: https://wallet.example.eu/verify?session=sess_1234567890abcdef
                      checks:
                        - type: age_over
                          value: 18
                      createdAt: "2025-10-03T20:30:00Z"
                      expiresAt: "2025-10-03T20:45:00Z"
                completed:
                  summary: Completed verification
                  value:
                    success: true
                    data:
                      id: sess_1234567890abcdef
                      status: completed
                      checks:
                        - type: age_over
                          value: 18
                      results:
                        age_over_18: true
                      completedAt: "2025-10-03T20:32:00Z"
                      createdAt: "2025-10-03T20:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ==========================
  # Admin Auth
  # ==========================
  /admin/auth/register:
    post:
      tags: [Admin Auth]
      summary: Register admin account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRegisterRequest'
      responses:
        '201':
          description: Registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /admin/auth/login:
    post:
      tags: [Admin Auth]
      summary: Login and create admin session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: Logged in; session cookie set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminAuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /admin/auth/reset-password/request:
    post:
      tags: [Admin Auth]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Always returns success to prevent email enumeration
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /admin/auth/reset-password/confirm:
    post:
      tags: [Admin Auth]
      summary: Confirm password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'

  # ==========================
  # API Keys
  # ==========================
  /admin/keys:
    get:
      tags: [API Keys]
      summary: List API keys
      security:
        - AdminSession: []
      responses:
        '200':
          description: List of keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags: [API Keys]
      summary: Create API key
      security:
        - AdminSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreateRequest'
      responses:
        '201':
          description: Key created (secret shown once)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ApiKey'
                  apiKey:
                    type: string
                    description: Secret shown only once
        '403':
          $ref: '#/components/responses/Unauthorized'

  /admin/keys/{id}/rotate:
    post:
      tags: [API Keys]
      summary: Rotate API key secret
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rotated successfully (new secret shown once)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyRotateResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/keys/{id}/revoke:
    post:
      tags: [API Keys]
      summary: Revoke API key
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ApiKey'
        '404':
          $ref: '#/components/responses/NotFound'

  # ==========================
  # Webhooks
  # ==========================
  /admin/webhooks:
    get:
      tags: [Webhooks]
      summary: List webhooks
      security:
        - AdminSession: []
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
          items:
            $ref: '#/components/schemas/Webhook'
        '403':
          $ref: '#/components/responses/UpgradeRequired'
    post:
      tags: [Webhooks]
      summary: Create webhook
      security:
        - AdminSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookCreateRequest'
      responses:
        '201':
          description: Created (secret shown once)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookCreateResponse'
        '403':
          $ref: '#/components/responses/UpgradeRequired'

  /admin/webhooks/{id}:
    get:
      tags: [Webhooks]
      summary: Get webhook
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Webhook
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                $ref: '#/components/schemas/Webhook'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/UpgradeRequired'
    patch:
      tags: [Webhooks]
      summary: Update webhook
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookUpdateRequest'
      responses:
        '200':
          description: Updated webhook
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                $ref: '#/components/schemas/Webhook'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/UpgradeRequired'
    delete:
      tags: [Webhooks]
      summary: Delete webhook
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/UpgradeRequired'

  /admin/webhooks/{id}/rotate-secret:
    post:
      tags: [Webhooks]
      summary: Rotate webhook secret
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Rotated (new secret shown once)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Webhook'
                  secret:
                    type: string
        '403':
          $ref: '#/components/responses/UpgradeRequired'

  /admin/webhooks/{id}/deliveries:
    get:
      tags: [Webhooks]
      summary: List webhook deliveries
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        '200':
          description: Paginated deliveries
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WebhookDelivery'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      limit:
                        type: integer
                      offset:
                        type: integer
                      hasMore:
                        type: boolean
        '403':
          $ref: '#/components/responses/UpgradeRequired'

  /admin/webhooks/{webhookId}/deliveries/{deliveryId}/retry:
    post:
      tags: [Webhooks]
      summary: Retry failed delivery
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: webhookId
          required: true
          schema:
            type: string
        - in: path
          name: deliveryId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Scheduled for retry
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '403':
          $ref: '#/components/responses/UpgradeRequired'

  /admin/anomaly/alerts:
    get:
      tags: [Anomaly Detection]
      summary: Get anomaly alerts
      description: |
        Retrieve AI-detected fraud and security alerts for your account.

        **Alert Severities:**
        - `low`: Minor anomalies, monitor
        - `medium`: Suspicious activity, investigate
        - `high`: Likely fraud, rate limit
        - `critical`: Confirmed threat, block immediately
      operationId: getAnomalyAlerts
      security:
        - AdminSession: []
      parameters:
        - name: status
          in: query
          description: Filter by alert status
          schema:
            type: string
            enum: [active, investigating, resolved, false_positive]
        - name: severity
          in: query
          description: Filter by alert severity
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: limit
          in: query
          description: Maximum number of alerts to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: List of anomaly alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnomalyAlert'
                  count:
                    type: integer
                    example: 5
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/FeatureForbidden'

  /admin/anomaly/alerts/{id}:
    patch:
      tags: [Anomaly Detection]
      summary: Update anomaly alert status
      description: Mark an alert as resolved, false positive, or under investigation
      operationId: updateAnomalyAlert
      security:
        - AdminSession: []
      parameters:
        - name: id
          in: path
          required: true
          description: Alert ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [active, investigating, resolved, false_positive]
                notes:
                  type: string
                  maxLength: 500
                  description: Optional notes about the alert resolution
      responses:
        '200':
          description: Alert updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AnomalyAlert'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/FeatureForbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/anomaly/metrics:
    get:
      tags: [Anomaly Detection]
      summary: Get anomaly detection metrics
      description: |
        Get aggregated security metrics for your dashboard.

        **Metrics Include:**
        - Total requests and failure rates
        - Unique IPs and geographic distribution
        - Anomaly detection statistics
        - Risk score distributions
      operationId: getAnomalyMetrics
      security:
        - AdminSession: []
      parameters:
        - name: timeRange
          in: query
          description: Time range for metrics
          schema:
            type: string
            enum: [hour, day, week]
            default: day
      responses:
        '200':
          description: Anomaly detection metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AnomalyMetrics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/FeatureForbidden'

  /admin/anomaly/dashboard:
    get:
      tags: [Anomaly Detection]
      summary: Get comprehensive anomaly dashboard data
      description: Get all anomaly detection data for the admin dashboard in one call
      operationId: getAnomalyDashboard
      security:
        - AdminSession: []
      responses:
        '200':
          description: Complete anomaly dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      recentAlerts:
                        type: array
                        items:
                          $ref: '#/components/schemas/AnomalyAlert'
                      metrics:
                        $ref: '#/components/schemas/AnomalyMetrics'
                      criticalAlerts:
                        type: array
                        items:
                          $ref: '#/components/schemas/AnomalyAlert'
                      summary:
                        type: object
                        properties:
                          activeAlerts:
                            type: integer
                          criticalAlerts:
                            type: integer
                          totalRequests:
                            type: integer
                          failureRate:
                            type: number
                          uniqueIps:
                            type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/FeatureForbidden'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key
      description: |
        Authenticate using an API key via the `Authorization: Bearer <key>` header.

        **Keys:**
        - Test: `wg_test_***` (test environment; 100 free/month)
        - Live: `wg_live_***` (production)

        Get your key at https://walletgate.app or log in at https://walletgate.app/login

    AdminSession:
      type: apiKey
      in: cookie
      name: wg_admin_session
      description: |
        Admin session cookie set by the dashboard after login.

        To use in docs: log in to the admin app locally, copy the `wg_admin_session` cookie value from your browser (DevTools → Application → Cookies), and paste it here. The cookie will be sent with requests to /admin/* endpoints.

  schemas:
    CreateSessionRequest:
      type: object
      required:
        - checks
      properties:
        checks:
          type: array
          minItems: 1
          description: Array of verification checks to perform
          items:
            type: object
            required:
              - type
              - value
            properties:
              type:
                type: string
                enum: [age_over, age_under, residency_in, attribute_match]
                description: |
                  Type of verification check:
                  - `age_over`: Verify user is at least X years old
                  - `age_under`: Verify user is at most X years old
                  - `residency_in`: Verify user resides in specified countries
                  - `attribute_match`: Match specific attribute (KYC)
              value:
                oneOf:
                  - type: number
                    description: Age value (for age_over, age_under)
                  - type: array
                    items:
                      type: string
                    description: Country codes (for residency_in)
                  - type: string
                    description: Attribute value (for attribute_match)
                example: 18
        returnUrl:
          type: string
          format: uri
          description: URL to redirect user after verification completes
          example: https://yourapp.com/verify-complete
        metadata:
          type: object
          additionalProperties: true
          description: Custom metadata to attach to session (max 10 keys)
          example:
            userId: "user_123"
            orderId: "order_456"

    SessionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            id:
              type: string
              description: Unique session identifier
              example: sess_1234567890abcdef
            status:
              type: string
              enum: [pending, in_progress, completed, failed, expired]
              description: Current session status
            verificationUrl:
              type: string
              format: uri
              description: URL to redirect user to their EU Digital Identity Wallet
              example: https://wallet.example.eu/verify?session=sess_1234567890abcdef
            checks:
              type: array
              description: Requested verification checks
              items:
                type: object
                properties:
                  type:
                    type: string
                  value:
                    oneOf:
                      - type: number
                      - type: string
                      - type: array
            results:
              type: object
              additionalProperties:
                type: boolean
              description: Verification check results (only present when status is completed)
              example:
                age_over_18: true
                eu_resident: true
            metadata:
              type: object
              description: Custom metadata attached to session
            createdAt:
              type: string
              format: date-time
            completedAt:
              type: string
              format: date-time
              description: When verification was completed (only for completed status)
            expiresAt:
              type: string
              format: date-time
              description: Session expiration time

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Human-readable error message
            details:
              type: object
              description: Additional error details (optional)

    AnomalyAlert:
      type: object
      description: AI-detected security or fraud alert
      properties:
        id:
          type: string
          description: Unique alert identifier
          example: "alert_abc123"
        merchantId:
          type: string
          description: Merchant ID this alert belongs to
        type:
          type: string
          enum: [velocity_attack, geo_anomaly, bot_traffic, credential_sharing, suspicious_pattern]
          description: Type of anomaly detected
        severity:
          type: string
          enum: [low, medium, high, critical]
          description: Alert severity level
        status:
          type: string
          enum: [active, investigating, resolved, false_positive]
          description: Current status of the alert
        riskScore:
          type: number
          minimum: 0
          maximum: 1
          description: AI-calculated risk score (0.0 = low risk, 1.0 = high risk)
          example: 0.85
        recommendation:
          type: string
          enum: [monitor, rate_limit, investigate, block]
          description: AI-recommended action
        details:
          type: object
          description: Additional details about the anomaly
          properties:
            ipAddress:
              type: string
              example: "192.168.1.1"
            country:
              type: string
              example: "DE"
            userAgent:
              type: string
            requestCount:
              type: integer
            timeWindow:
              type: string
        aiInsights:
          type: string
          description: AI-generated analysis of the threat
          example: "Detected 47 verification attempts from same IP in 2 minutes. Confidence: 0.92"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resolvedBy:
          type: string
          description: Email of admin who resolved the alert
        notes:
          type: string
          description: Admin notes about the alert

    AnomalyMetrics:
      type: object
      description: Aggregated anomaly detection metrics
      properties:
        summary:
          type: object
          properties:
            totalRequests:
              type: integer
              description: Total verification requests in timeframe
            failureRate:
              type: number
              description: Percentage of failed verifications
            uniqueIps:
              type: integer
              description: Number of unique IP addresses
            averageRiskScore:
              type: number
              description: Average AI risk score
        alerts:
          type: object
          properties:
            total:
              type: integer
            byType:
              type: object
              additionalProperties:
                type: integer
            bySeverity:
              type: object
              properties:
                low:
                  type: integer
                medium:
                  type: integer
                high:
                  type: integer
                critical:
                  type: integer
        geoDistribution:
          type: object
          description: Request distribution by country
          additionalProperties:
            type: integer
        riskScoreDistribution:
          type: object
          properties:
            low:
              type: integer
              description: Requests with risk score 0.0-0.3
            medium:
              type: integer
              description: Requests with risk score 0.3-0.7
            high:
              type: integer
              description: Requests with risk score 0.7-1.0

    AdminRegisterRequest:
      type: object
      required: [email, password, name]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        name:
          type: string
        companyName:
          type: string

    AdminLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    PasswordResetRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email

    PasswordResetConfirm:
      type: object
      required: [email, token, newPassword]
      properties:
        email:
          type: string
          format: email
        token:
          type: string
        newPassword:
          type: string
          minLength: 8

    AdminAuthResponse:
      type: object
      properties:
        success:
          type: boolean
        csrfToken:
          type: string
        isSuperAdmin:
          type: boolean
        apiKey:
          type: string
          description: Returned on register (test key shown once)

    ApiKey:
      type: object
      properties:
        id:
          type: string
        publicId:
          type: string
        name:
          type: string
        environment:
          type: string
          enum: [test, live]
        status:
          type: string
          enum: [active, revoked]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
          nullable: true

    ApiKeyCreateRequest:
      type: object
      properties:
        name:
          type: string
        environment:
          type: string
          enum: [test, live]
        expiresAt:
          type: string
          format: date-time

    ApiKeyRotateResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/ApiKey'
        apiKey:
          type: string
          description: New secret shown once

    Webhook:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum: [verification.started, verification.completed, verification.failed, verification.expired]
        headers:
          type: object
          additionalProperties:
            type: string
        enabled:
          type: boolean
        status:
          type: string
        failureCount:
          type: integer
        lastFailureAt:
          type: string
          format: date-time
          nullable: true
        lastSuccessAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    WebhookCreateRequest:
      type: object
      required: [url, events]
      properties:
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum: [verification.started, verification.completed, verification.failed, verification.expired]
        headers:
          type: object
          additionalProperties:
            type: string

    WebhookUpdateRequest:
      type: object
      properties:
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum: [verification.started, verification.completed, verification.failed, verification.expired]
        headers:
          type: object
          additionalProperties:
            type: string
        enabled:
          type: boolean

    WebhookCreateResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Webhook'
        secret:
          type: string
          description: Secret shown only once
        message:
          type: string

    WebhookDelivery:
      type: object
      properties:
        id:
          type: string
        event:
          type: string
        status:
          type: string
        attemptNumber:
          type: integer
        responseStatus:
          type: integer
          nullable: true
        error:
          type: string
          nullable: true
        deliveredAt:
          type: string
          format: date-time
          nullable: true
        nextRetryAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: INVALID_REQUEST
              message: "Invalid check type. Must be one of: age_over, age_under, residency_in, attribute_match"

    Unauthorized:
      description: Invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: UNAUTHORIZED
              message: "Invalid API key. Get your key at https://walletgate.app"

    UsageLimitExceeded:
      description: Monthly or daily usage limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: USAGE_LIMIT_EXCEEDED
              message: "Monthly verification limit exceeded. Upgrade your plan at https://walletgate.app/billing"
              details:
                currentUsage: 1000
                monthlyLimit: 1000
                upgradeUrl: "https://walletgate.app/billing"

    RateLimitExceeded:
      description: Too many requests
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: RATE_LIMIT_EXCEEDED
              message: "Too many requests. Please retry after 60 seconds."
              details:
                retryAfter: 60

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: NOT_FOUND
      message: "Session not found"

    FeatureForbidden:
      description: Feature not available for current plan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: FEATURE_NOT_AVAILABLE
              message: "AI-powered anomaly detection is available on Growth and Scale plans. Please upgrade your plan."
              details:
                requiredPlan: growth
                currentPlan: trial

    UpgradeRequired:
      description: Upgrade required to access this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: UPGRADE_REQUIRED
              message: "Webhooks require Growth plan or higher. Upgrade to access webhook functionality."
              details:
                requiredPlan: growth
                currentPlan: starter
                upgradeUrl: "/admin/billing"
